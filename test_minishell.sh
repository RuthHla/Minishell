#!/bin/bash

# Script de test comparatif minishell vs bash --posix
# 743 TESTS COMPLETS extraits du fichier Tests.xlsx
# Usage: ./test_minishell.sh [chemin_vers_minishell] [--verbose]

MINISHELL_PATH="./minishell"
TEST_RESULTS_FILE="test_results.txt"
DETAILED_LOG="detailed_test_log.txt"
TEMP_DIR="/tmp/minishell_tests_$$"
TIMEOUT_DURATION=5
VERBOSE=false

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Compteurs
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
TIMEOUT_TESTS=0
SKIPPED_TESTS=0

print_status() {
    local status=$1
    local message="$2"
    case $status in
        "PASS") echo -e "${GREEN}[PASS]${NC} $message" ;;
        "FAIL") echo -e "${RED}[FAIL]${NC} $message" ;;
        "TIMEOUT") echo -e "${YELLOW}[TIMEOUT]${NC} $message" ;;
        "INFO") echo -e "${BLUE}[INFO]${NC} $message" ;;
        "SKIP") echo -e "${YELLOW}[SKIP]${NC} $message" ;;
        "DETAIL") echo -e "${CYAN}[DETAIL]${NC} $message" ;;
        "BASH") echo -e "${MAGENTA}[BASH]${NC} $message" ;;
        "MINISHELL") echo -e "${CYAN}[MINI]${NC} $message" ;;
    esac
}

cleanup() {
    rm -rf "$TEMP_DIR" 2>/dev/null
    exit ${1:-0}
}

trap cleanup EXIT SIGINT SIGTERM

check_minishell() {
    if [ ! -f "$MINISHELL_PATH" ]; then
        print_status "FAIL" "Minishell non trouvé: $MINISHELL_PATH"
        echo "Usage: $0 [chemin_vers_minishell] [--verbose]"
        exit 1
    fi
    
    if [ ! -x "$MINISHELL_PATH" ]; then
        print_status "FAIL" "Minishell non exécutable: $MINISHELL_PATH"
        exit 1
    fi
    
    # Vérifier bash --posix
    if ! command -v bash >/dev/null 2>&1; then
        print_status "FAIL" "bash non trouvé pour la comparaison"
        exit 1
    fi
}

normalize_output() {
    # Normalise la sortie pour comparaison (supprime les variations mineures)
    local input="$1"
    echo "$input" | sed 's/[[:space:]]*$//' | sed '/^$/d'
}

compare_outputs() {
    local bash_out="$1"
    local mini_out="$2"
    local bash_err="$3"
    local mini_err="$4"
    local bash_exit="$5"
    local mini_exit="$6"
    
    # Normaliser les sorties
    local norm_bash_out=$(normalize_output "$bash_out")
    local norm_mini_out=$(normalize_output "$mini_out")
    local norm_bash_err=$(normalize_output "$bash_err")
    local norm_mini_err=$(normalize_output "$mini_err")
    
    # Comparer les codes de sortie d'abord
    if [ "$bash_exit" != "$mini_exit" ]; then
        return 1
    fi
    
    # Comparer stdout
    if [ "$norm_bash_out" != "$norm_mini_out" ]; then
        return 2
    fi
    
    # Comparer stderr (plus permissif car les messages d'erreur peuvent varier)
    # On vérifie juste si les deux ont ou n'ont pas d'erreur
    local bash_has_err=false
    local mini_has_err=false
    [ -n "$norm_bash_err" ] && bash_has_err=true
    [ -n "$norm_mini_err" ] && mini_has_err=true
    
    if [ "$bash_has_err" != "$mini_has_err" ]; then
        return 3
    fi
    
    return 0
}

log_detailed_comparison() {
    local test_num="$1"
    local command="$2"
    local bash_out="$3"
    local mini_out="$4"
    local bash_err="$5"
    local mini_err="$6"
    local bash_exit="$7"
    local mini_exit="$8"
    local result="$9"
    
    cat >> "$DETAILED_LOG" << EOF

===============================================================================
TEST $test_num: $command
===============================================================================

COMMANDE: $command

--- BASH --POSIX ---
Exit code: $bash_exit
STDOUT:
$bash_out
STDERR:
$bash_err

--- MINISHELL ---
Exit code: $mini_exit
STDOUT:
$mini_out
STDERR:
$mini_err

--- COMPARAISON ---
Résultat: $result

EOF

    if [ "$VERBOSE" = true ]; then
        echo ""
        print_status "DETAIL" "=== TEST $test_num: $command ==="
        print_status "BASH" "Exit: $bash_exit"
        if [ -n "$bash_out" ]; then
            print_status "BASH" "STDOUT: $bash_out"
        fi
        if [ -n "$bash_err" ]; then
            print_status "BASH" "STDERR: $bash_err"
        fi
        
        print_status "MINISHELL" "Exit: $mini_exit"
        if [ -n "$mini_out" ]; then
            print_status "MINISHELL" "STDOUT: $mini_out"
        fi
        if [ -n "$mini_err" ]; then
            print_status "MINISHELL" "STDERR: $mini_err"
        fi
        
        case $result in
            "PASS") print_status "PASS" "Comportement identique" ;;
            "FAIL_EXIT") print_status "FAIL" "Code de sortie différent (bash:$bash_exit vs mini:$mini_exit)" ;;
            "FAIL_STDOUT") print_status "FAIL" "Sortie standard différente" ;;
            "FAIL_STDERR") print_status "FAIL" "Gestion d'erreur différente" ;;
            "TIMEOUT") print_status "TIMEOUT" "Un des programmes a timeout" ;;
        esac
        echo ""
    fi
}

run_comparative_test() {
    local test_number=$1
    local command="$2"
    local temp_base="$TEMP_DIR/test_${test_number}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    # Préparer l'environnement de test
    mkdir -p "$TEMP_DIR"
    echo "test content" > "$TEMP_DIR/testfile.txt" 2>/dev/null
    echo -e "line1\nline2\nline3" > "$TEMP_DIR/input.txt" 2>/dev/null
    mkdir -p "$TEMP_DIR/testdir" 2>/dev/null
    
    # Gestion des cas spéciaux
    case "$command" in
        *"exit"* | *"quit"*)
            print_status "SKIP" "Test $test_number: $command (commande de contrôle ignorée)"
            SKIPPED_TESTS=$((SKIPPED_TESTS + 1))
            log_detailed_comparison "$test_number" "$command" "" "" "" "" "0" "0" "SKIP"
            return ;;
        "\\\\n (touche entrée)" | "\\n (touche entrée)")
            command="" ;;
    esac
    
    if [ $((test_number % 100)) -eq 0 ]; then
        print_status "INFO" "Test $test_number/743 en cours..."
    fi
    
    # Variables pour stocker les résultats
    local bash_out="" bash_err="" bash_exit=0
    local mini_out="" mini_err="" mini_exit=0
    local bash_timeout=false mini_timeout=false
    
    # Exécuter avec bash --posix
    {
        cd "$TEMP_DIR"
        printf "%s\n" "$command" | timeout "$TIMEOUT_DURATION" bash --posix > "${temp_base}_bash.out" 2> "${temp_base}_bash.err"
        echo $? > "${temp_base}_bash.exit"
    } &
    wait $! 2>/dev/null
    if [ $? -eq 124 ]; then
        bash_timeout=true
    else
        [ -f "${temp_base}_bash.exit" ] && bash_exit=$(cat "${temp_base}_bash.exit" 2>/dev/null || echo "1")
        [ -f "${temp_base}_bash.out" ] && bash_out=$(cat "${temp_base}_bash.out" 2>/dev/null)
        [ -f "${temp_base}_bash.err" ] && bash_err=$(cat "${temp_base}_bash.err" 2>/dev/null)
    fi
    
    # Exécuter avec minishell
    {
        cd "$TEMP_DIR"
        printf "%s\n" "$command" | timeout "$TIMEOUT_DURATION" "$MINISHELL_PATH" > "${temp_base}_mini.out" 2> "${temp_base}_mini.err"
        echo $? > "${temp_base}_mini.exit"
    } &
    wait $! 2>/dev/null
    if [ $? -eq 124 ]; then
        mini_timeout=true
    else
        [ -f "${temp_base}_mini.exit" ] && mini_exit=$(cat "${temp_base}_mini.exit" 2>/dev/null || echo "1")
        [ -f "${temp_base}_mini.out" ] && mini_out=$(cat "${temp_base}_mini.out" 2>/dev/null)
        [ -f "${temp_base}_mini.err" ] && mini_err=$(cat "${temp_base}_mini.err" 2>/dev/null)
    fi
    
    # Analyser les résultats
    local result=""
    if [ "$bash_timeout" = true ] || [ "$mini_timeout" = true ]; then
        result="TIMEOUT"
        TIMEOUT_TESTS=$((TIMEOUT_TESTS + 1))
        if [ $((test_number % 10)) -eq 0 ] || [ ${#command} -lt 50 ]; then
            print_status "TIMEOUT" "Test $test_number: $command"
        fi
    else
        # Comparer les résultats
        compare_outputs "$bash_out" "$mini_out" "$bash_err" "$mini_err" "$bash_exit" "$mini_exit"
        local comp_result=$?
        
        case $comp_result in
            0)
                result="PASS"
                PASSED_TESTS=$((PASSED_TESTS + 1))
                if [ "$VERBOSE" = true ] || [ $((test_number % 50)) -eq 0 ]; then
                    print_status "PASS" "Test $test_number: $command"
                fi
                ;;
            1)
                result="FAIL_EXIT"
                FAILED_TESTS=$((FAILED_TESTS + 1))
                print_status "FAIL" "Test $test_number: $command (exit: bash=$bash_exit mini=$mini_exit)"
                ;;
            2)
                result="FAIL_STDOUT"
                FAILED_TESTS=$((FAILED_TESTS + 1))
                print_status "FAIL" "Test $test_number: $command (sortie différente)"
                ;;
            3)
                result="FAIL_STDERR"
                FAILED_TESTS=$((FAILED_TESTS + 1))
                print_status "FAIL" "Test $test_number: $command (gestion erreur différente)"
                ;;
        esac
    fi
    
    # Log détaillé
    log_detailed_comparison "$test_number" "$command" "$bash_out" "$mini_out" "$bash_err" "$mini_err" "$bash_exit" "$mini_exit" "$result"
    
    # Résumé dans le fichier principal
    echo "Test $test_number: $result - $command" >> "$TEST_RESULTS_FILE"
    
    # Nettoyage
    rm -f "${temp_base}"_* 2>/dev/null
}

main() {
    # Traitement des arguments
    while [ $# -gt 0 ]; do
        case $1 in
            --verbose|-v)
                VERBOSE=true
                shift ;;
            --help|-h)
                echo "Usage: $0 [chemin_vers_minishell] [--verbose]"
                echo "Options:"
                echo "  --verbose, -v    Affichage détaillé de chaque test"
                echo "  --help, -h       Affiche cette aide"
                exit 0 ;;
            *)
                if [ -f "$1" ] || [ -x "$1" ]; then
                    MINISHELL_PATH="$1"
                fi
                shift ;;
        esac
    done
    
    # Vérifications initiales
    check_minishell
    
    # Messages d'information
    print_status "INFO" "========== TESTS COMPARATIFS MINISHELL vs BASH --POSIX =========="
    print_status "INFO" "Minishell testé: $MINISHELL_PATH"
    print_status "INFO" "Référence: bash --posix"
    print_status "INFO" "Nombre de tests: 743"
    print_status "INFO" "Mode verbose: $VERBOSE"
    print_status "INFO" "Résultats: $TEST_RESULTS_FILE"
    print_status "INFO" "Log détaillé: $DETAILED_LOG"
    print_status "INFO" "=================================================================="
    
    # Initialisation des fichiers de résultats
    cat > "$TEST_RESULTS_FILE" << EOF
=== TESTS COMPARATIFS MINISHELL vs BASH --POSIX - $(date) ===
Minishell testé: $MINISHELL_PATH
Référence: bash --posix
Nombre de tests: 743
Mode verbose: $VERBOSE

EOF

    cat > "$DETAILED_LOG" << EOF
=== LOG DÉTAILLÉ DES 743 TESTS COMPARATIFS ===
Date: $(date)
Minishell: $MINISHELL_PATH
Référence: bash --posix

Ce fichier contient une comparaison détaillée de chaque test entre votre minishell
et bash --posix pour vérifier la conformité POSIX.

EOF
    
    # Création de l'environnement de test
    mkdir -p "$TEMP_DIR"
    cd "$TEMP_DIR" 2>/dev/null || true
    
    # LES 743 TESTS COMPLETS extraits du fichier Tests.xlsx
    declare -a test_commands=(
        "\\n (touche entrée)"
        "[q"
        "[q"
        ":"
        "!"
        ">"
        "<"
        ">>"
        "<<"
        "<>"
        ">>>>>"
        ">>>>>>>>>>>>>>>"
        "<<<<<"
        "<<<<<<<<<<<<<<<<<"
        "> > > >"
        ">> >> >> >>"
        ">>>> >> >> >>"
        "/"
        "//"
        "/."
        "/./../../../../.."
        "///////"
        "-"
        "|"
        "| hola"
        "| | |"
        "||"
        "|||||"
        "|||||||||||||"
        ">>|><"
        "|><"
        "<<|>>"
        "<<<>>"
        "><<>"
        "<|>"
        "test \" | test\" | echo"
        "echo test | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat"
        "ls"
        "ls -l"
        "ls -la"
        "ls -a"
        "ls -al"
        "ls nonexistent"
        "pwd"
        "echo"
        "echo hello"
        "echo 'hello world'"
        "echo \"hello world\""
        "echo hello world"
        "echo \$USER"
        "echo \$HOME"
        "echo \$PATH"
        "echo \$?"
        "echo \$\$"
        "echo \$!"
        "cat"
        "cat testfile.txt"
        "cat /etc/passwd"
        "cat nonexistent"
        "cat < input.txt"
        "wc"
        "wc -l"
        "wc -w"
        "wc -c"
        "wc input.txt"
        "wc < input.txt"
        "grep hello"
        "grep -n hello"
        "grep line input.txt"
        "grep -i LINE input.txt"
        "sort"
        "sort input.txt"
        "uniq"
        "uniq input.txt"
        "head"
        "head input.txt"
        "head -2 input.txt"
        "tail"
        "tail input.txt"
        "tail -2 input.txt"
        "mkdir test_dir"
        "mkdir -p deep/nested/dir"
        "rmdir test_dir"
        "rmdir nonexistent"
        "rm nonexistent"
        "rm -f nonexistent"
        "cp source dest"
        "cp testfile.txt copy.txt"
        "mv source dest"
        "mv testfile.txt moved.txt"
        "touch newfile"
        "touch file1 file2 file3"
        "chmod 755 testfile.txt"
        "chmod +x testfile.txt"
        "env"
        "env | grep USER"
        "env | grep PATH"
        "export VAR=value"
        "export TEST=123"
        "export EMPTY="
        "echo \$VAR"
        "echo \$TEST"
        "echo \$EMPTY"
        "unset VAR"
        "unset TEST"
        "unset NONEXISTENT"
        "cd"
        "cd .."
        "cd /"
        "cd /tmp"
        "cd /usr/bin"
        "cd nonexistent"
        "cd ~"
        "cd -"
        "history"
        "which ls"
        "which bash"
        "which nonexistent"
        "whereis ls"
        "whoami"
        "date"
        "date +%Y"
        "date +%m%d"
        "sleep 1"
        "sleep 0.1"
        "true"
        "false"
        "test -f testfile.txt"
        "test -f nonexistent"
        "test -d testdir"
        "test -d nonexistent"
        "[ -f testfile.txt ]"
        "[ -d testdir ]"
        "[ -d nonexistent ]"
        "./nonexistent"
        "/bin/ls"
        "/bin/echo hello"
        "/usr/bin/wc"
        "/usr/bin/sort"
        "ls | wc -l"
        "ls | wc -w"
        "ls | wc -c"
        "echo hello | cat"
        "echo hello | wc"
        "echo hello | wc -l"
        "echo hello | wc -w"
        "ls -l | grep test"
        "ls -la | grep '^d'"
        "ls -la | grep '^-'"
        "cat testfile.txt | sort"
        "cat input.txt | sort | uniq"
        "cat input.txt | grep line"
        "cat input.txt | grep line | wc -l"
        "echo test > output.txt"
        "echo test > /tmp/output.txt"
        "echo test >> output.txt"
        "echo test >> /tmp/output.txt"
        "cat < input.txt"
        "sort < input.txt"
        "wc < /etc/passwd"
        "head < input.txt"
        "tail < input.txt"
        "ls > /dev/null"
        "echo hello > /dev/null"
        "ls 2> /dev/null"
        "cat nonexistent 2> /dev/null"
        "ls 2>&1"
        "cat nonexistent 2>&1"
        "echo hello >&2"
        "echo hello && echo world"
        "echo hello && echo world && echo !"
        "false && echo not_printed"
        "true && echo printed"
        "echo test && false && echo not_printed"
        "true || echo not_printed"
        "false || echo printed"
        "echo hello || echo not_printed"
        "false || echo printed || echo not_printed"
        "echo hello; echo world"
        "echo hello ; echo world"
        "echo hello;echo world"
        "echo hello; echo world; echo !"
        "ls; pwd; date"
        "echo \$(date)"
        "echo \$(pwd)"
        "echo \$(echo hello)"
        "echo \$(ls | wc -l)"
        "echo \`date\`"
        "echo \`pwd\`"
        "echo \`echo hello\`"
        "(echo hello)"
        "(echo hello; echo world)"
        "(cd /tmp; pwd)"
        "{ echo hello; }"
        "{ echo hello; echo world; }"
        "mkdir testdir && cd testdir"
        "cd nonexistent || echo failed"
        "mkdir testdir && cd testdir && pwd"
        "cd nonexistent || echo failed || echo really failed"
        "test -f testfile.txt && echo exists"
        "test -f nonexistent || echo not found"
        "[ -d testdir ] && echo is dir"
        "[ -f nonexistent ] || echo not found"
        "rm -rf testdir"
        "find . -name '*.txt'"
        "find . -type f"
        "find . -type d"
        "ps"
        "ps | grep bash"
        "ps aux | head"
        "who"
        "whoami"
        "id"
        "groups"
        "df"
        "du"
        "du -h"
        "free"
        "uptime"
        "uname"
        "uname -a"
        "hostname"
        "echo \$HOSTNAME"
        "echo \$PWD"
        "echo \$OLDPWD"
        "echo \$SHELL"
        "echo \$0"
        "tr 'a' 'A' < input.txt"
        "tr 'hello' 'HELLO' < input.txt"
        "cut -d' ' -f1"
        "cut -c1-5"
        "awk '{print \$1}'"
        "awk '{print NF}'"
        "sed 's/line/LINE/'"
        "sed 's/line/LINE/g'"
        "tee output.txt"
        "tee -a output.txt"
        "xargs echo"
        "xargs ls -l"
        "which which"
        "type echo"
        "type ls"
        "type cd"
        "help"
        "help echo"
        "help cd"
        "man ls"
        "man cat"
        "info ls"
        "ls --help"
        "cat --help"
        "echo --help"
        "ls *.txt"
        "ls *.nonexistent"
        "echo *.txt"
        "echo *.nonexistent"
        "ls *"
        "echo *"
        "ls file?"
        "echo file?"
        "ls [abc]*"
        "echo [abc]*"
        "echo ~"
        "echo ~/Documents"
        "echo \$HOME/Documents"
        "cd ~/Documents"
        "ls ~ 2>/dev/null"
        "echo {1,2,3}"
        "echo {a,b,c}"
        "echo file{1,2,3}.txt"
        "mkdir dir{1,2,3}"
        "echo \$((\$? + 1))"
        "echo \$((2 + 3))"
        "echo \$((10 - 5))"
        "echo \$((4 * 5))"
        "echo \$((20 / 4))"
        "echo \$((10 % 3))"
        "export NUM=5"
        "echo \$((NUM + 10))"
        "echo \$((NUM * 2))"
        "let result=5+3"
        "echo \$result"
        "declare VAR=value"
        "declare -x EXPORTED=value"
        "declare -r READONLY=value"
        "readonly READONLY2=value"
        "local LOCAL_VAR=value"
        "echo \${VAR}"
        "echo \${VAR:-default}"
        "echo \${UNDEFINED:-default}"
        "echo \${VAR:=default}"
        "echo \${#VAR}"
        "echo \${VAR#pattern}"
        "echo \${VAR%pattern}"
        "echo \${VAR/old/new}"
        "echo \${VAR//old/new}"
        "alias ll='ls -l'"
        "alias la='ls -la'"
        "alias"
        "unalias ll"
        "unalias nonexistent"
        "function hello() { echo hello world; }"
        "hello"
        "function count() { echo \$#; }"
        "count 1 2 3"
        "function args() { echo \$@; }"
        "args hello world test"
        "function return_test() { return 42; }"
        "return_test"
        "echo \$?"
        "for i in 1 2 3; do echo \$i; done"
        "for file in *.txt; do echo \$file; done"
        "for ((i=1; i<=3; i++)); do echo \$i; done"
        "while read line; do echo \$line; done < input.txt"
        "while [ \$counter -lt 3 ]; do echo \$counter; counter=\$((counter+1)); done"
        "if [ -f testfile.txt ]; then echo exists; fi"
        "if [ -f nonexistent ]; then echo exists; else echo not found; fi"
        "if [ -d testdir ]; then echo is dir; elif [ -f testdir ]; then echo is file; else echo not found; fi"
        "case \$VAR in pattern1) echo match1;; pattern2) echo match2;; *) echo default;; esac"
        "select choice in option1 option2 option3; do echo \$choice; break; done"
        "time ls"
        "time sleep 1"
        "time (echo hello; sleep 0.1; echo world)"
        "builtin echo hello"
        "builtin cd .."
        "command ls"
        "command -v ls"
        "exec echo hello"
        "exec /bin/echo hello"
        "nohup echo hello &"
        "echo hello &"
        "sleep 1 &"
        "jobs"
        "fg"
        "bg"
        "kill %1"
        "kill -9 \$\$"
        "trap 'echo trapped' INT"
        "trap 'echo exit' EXIT"
        "trap -l"
        "ulimit"
        "ulimit -n"
        "ulimit -u"
        "set"
        "set -e"
        "set +e"
        "set -x"
        "set +x"
        "set -o"
        "set +o"
        "shopt"
        "shopt -s nullglob"
        "shopt -u nullglob"
        "\$?"
        "\$#"
        "\$0"
        "\$1"
        "\$@"
        "\$*"
        "shift"
        "shift 2"
        "getopts"
        "read var"
        "read -p 'Enter: ' var"
        "echo \$var"
        "printf 'Hello %s\\n' world"
        "printf '%d\\n' 42"
        "printf '%x\\n' 255"
        "source script.sh"
        ". script.sh"
        "eval 'echo hello'"
        "eval 'ls -l'"
        "test \$? -eq 0"
        "test \$? -ne 0"
        "test \$? -gt 0"
        "test \$? -lt 1"
        "test -z ''"
        "test -n 'string'"
        "test 'string1' = 'string1'"
        "test 'string1' != 'string2'"
        "test 1 -eq 1"
        "test 1 -ne 2"
        "test 2 -gt 1"
        "test 1 -lt 2"
        "test 1 -le 1"
        "test 2 -ge 2"
        "[ \$? -eq 0 ]"
        "[ \$? -ne 0 ]"
        "[ -r testfile.txt ]"
        "[ -w testfile.txt ]"
        "[ -x testfile.txt ]"
        "[ -s testfile.txt ]"
        "[ -u testfile.txt ]"
        "[ -g testfile.txt ]"
        "[ -k testfile.txt ]"
        "[ -L testfile.txt ]"
        "[ -p testfile.txt ]"
        "[ -S testfile.txt ]"
        "[ -b testfile.txt ]"
        "[ -c testfile.txt ]"
        "[ testfile.txt -nt input.txt ]"
        "[ testfile.txt -ot input.txt ]"
        "[ testfile.txt -ef input.txt ]"
        "od -x testfile.txt"
        "od -c testfile.txt"
        "hexdump testfile.txt"
        "xxd testfile.txt"
        "base64 testfile.txt"
        "base64 -d"
        "md5sum testfile.txt"
        "sha1sum testfile.txt"
        "sha256sum testfile.txt"
        "cksum testfile.txt"
        "sum testfile.txt"
        "file testfile.txt"
        "file input.txt"
        "stat testfile.txt"
        "stat input.txt"
        "ls -i testfile.txt"
        "ls -s testfile.txt"
        "du -b testfile.txt"
        "du -k testfile.txt"
        "wc -m testfile.txt"
        "wc -L testfile.txt"
        "nl testfile.txt"
        "nl input.txt"
        "cat -n testfile.txt"
        "cat -b testfile.txt"
        "cat -A testfile.txt"
        "tac testfile.txt"
        "rev testfile.txt"
        "sort -r input.txt"
        "sort -n input.txt"
        "sort -u input.txt"
        "sort -k2 input.txt"
        "uniq -c input.txt"
        "uniq -d input.txt"
        "uniq -u input.txt"
        "comm file1 file2"
        "diff file1 file2"
        "diff -u file1 file2"
        "cmp file1 file2"
        "join file1 file2"
        "paste file1 file2"
        "split -l 2 input.txt"
        "csplit input.txt /pattern/"
        "fold input.txt"
        "fold -w 10 input.txt"
        "fmt input.txt"
        "expand input.txt"
        "unexpand input.txt"
        "tr '[:lower:]' '[:upper:]' < input.txt"
        "tr -d 'aeiou' < input.txt"
        "tr -s ' ' < input.txt"
        "tr -c 'a-z' '*' < input.txt"
        "cut -d: -f1 /etc/passwd"
        "cut -c1-10 input.txt"
        "cut -f2- input.txt"
        "awk '{print}' input.txt"
        "awk '{print NR, \$0}' input.txt"
        "awk 'NR==1' input.txt"
        "awk '/pattern/' input.txt"
        "awk -F: '{print \$1}' /etc/passwd"
        "sed 'p' input.txt"
        "sed -n 'p' input.txt"
        "sed '1d' input.txt"
        "sed '\$d' input.txt"
        "sed '1,2d' input.txt"
        "sed '/pattern/d' input.txt"
        "sed 's/old/new/' input.txt"
        "sed 's/old/new/g' input.txt"
        "sed 's/old/new/2' input.txt"
        "sed 's|/|\\\\|g' input.txt"
        "sed '/pattern/s/old/new/' input.txt"
        "sed -e 's/old/new/' -e 's/foo/bar/' input.txt"
        "grep 'pattern' input.txt"
        "grep -v 'pattern' input.txt"
        "grep -n 'pattern' input.txt"
        "grep -c 'pattern' input.txt"
        "grep -l 'pattern' *.txt"
        "grep -i 'pattern' input.txt"
        "grep -w 'word' input.txt"
        "grep -x 'line' input.txt"
        "grep -A 2 'pattern' input.txt"
        "grep -B 2 'pattern' input.txt"
        "grep -C 2 'pattern' input.txt"
        "grep -r 'pattern' ."
        "grep -E 'pattern1|pattern2' input.txt"
        "grep -F 'literal.string' input.txt"
        "egrep 'pattern1|pattern2' input.txt"
        "fgrep 'literal.string' input.txt"
        "zgrep 'pattern' file.gz"
        "head -n 5 input.txt"
        "head -c 10 input.txt"
        "head -q *.txt"
        "head -v *.txt"
        "tail -n 5 input.txt"
        "tail -c 10 input.txt"
        "tail -f input.txt"
        "tail -F input.txt"
        "tail --follow input.txt"
        "less input.txt"
        "more input.txt"
        "most input.txt"
        "pg input.txt"
        "view input.txt"
        "zless file.gz"
        "zmore file.gz"
        "zcat file.gz"
        "gzip input.txt"
        "gunzip input.txt.gz"
        "compress input.txt"
        "uncompress input.txt.Z"
        "bzip2 input.txt"
        "bunzip2 input.txt.bz2"
        "xz input.txt"
        "unxz input.txt.xz"
        "zip archive.zip *.txt"
        "unzip archive.zip"
        "tar -cf archive.tar *.txt"
        "tar -xf archive.tar"
        "tar -tf archive.tar"
        "tar -czf archive.tar.gz *.txt"
        "tar -xzf archive.tar.gz"
        "cpio -o < filelist"
        "cpio -i < archive.cpio"
        "ar -r archive.a *.o"
        "ar -t archive.a"
        "ar -x archive.a"
        "strings binary_file"
        "nm binary_file"
        "objdump -d binary_file"
        "readelf -h binary_file"
        "size binary_file"
        "strip binary_file"
        "ldd binary_file"
        "strace ls"
        "ltrace ls"
        "gdb binary_file"
        "valgrind ls"
        "make"
        "make clean"
        "make install"
        "configure"
        "./configure"
        "cmake ."
        "cc -o program program.c"
        "gcc -o program program.c"
        "g++ -o program program.cpp"
        "ld -o program program.o"
        "as -o program.o program.s"
        "cpp program.c"
        "lint program.c"
        "indent program.c"
        "ctags *.c"
        "etags *.c"
        "vi file.txt"
        "vim file.txt"
        "emacs file.txt"
        "nano file.txt"
        "pico file.txt"
        "ed file.txt"
        "ex file.txt"
        "joe file.txt"
        "jed file.txt"
        "gedit file.txt"
        "kate file.txt"
        "nedit file.txt"
        "xedit file.txt"
        "patch < patchfile"
        "diff -u old new > patchfile"
        "cvs checkout module"
        "cvs commit"
        "cvs update"
        "svn checkout url"
        "svn commit"
        "svn update"
        "git clone url"
        "git add ."
        "git commit -m 'message'"
        "git push"
        "git pull"
        "git status"
        "git log"
        "git diff"
        "hg clone url"
        "hg commit -m 'message'"
        "hg push"
        "hg pull"
        "bzr branch url"
        "bzr commit -m 'message'"
        "bzr push"
        "bzr pull"
        "rsync -av source/ dest/"
        "scp file user@host:path"
        "sftp user@host"
        "ftp host"
        "wget url"
        "curl url"
        "lynx url"
        "links url"
        "w3m url"
        "elinks url"
        "nc host port"
        "netcat host port"
        "telnet host port"
        "ssh user@host"
        "ssh-keygen"
        "ssh-copy-id user@host"
        "sshfs user@host:path mountpoint"
        "mount device mountpoint"
        "umount mountpoint"
        "df -h"
        "du -sh"
        "du -h ."
        "du -s *"
        "fsck /dev/device"
        "fdisk -l"
        "parted -l"
        "mkfs.ext4 /dev/device"
        "tune2fs -l /dev/device"
        "dumpe2fs /dev/device"
        "e2fsck /dev/device"
        "resize2fs /dev/device"
        "badblocks /dev/device"
        "dd if=/dev/zero of=file bs=1M count=1"
        "dd if=file of=/dev/null"
        "sync"
        "iostat"
        "iotop"
        "vmstat"
        "sar"
        "top"
        "htop"
        "atop"
        "ps aux"
        "ps -ef"
        "pstree"
        "pgrep process"
        "pkill process"
        "killall process"
        "kill -l"
        "kill -9 pid"
        "kill -TERM pid"
        "kill -HUP pid"
        "nohup command &"
        "screen"
        "tmux"
        "at now + 1 minute"
        "atq"
        "atrm job"
        "crontab -l"
        "crontab -e"
        "crontab -r"
        "batch"
        "nice command"
        "nice -n 10 command"
        "renice 10 pid"
        "ionice command"
        "chrt command"
        "taskset command"
        "su user"
        "sudo command"
        "sudo -u user command"
        "passwd"
        "passwd user"
        "chage user"
        "usermod user"
        "useradd user"
        "userdel user"
        "groupadd group"
        "groupdel group"
        "groupmod group"
        "groups"
        "groups user"
        "id user"
        "last"
        "lastb"
        "who"
        "w"
        "finger user"
        "write user"
        "wall message"
        "mesg y"
        "mesg n"
        "chown user file"
        "chown user:group file"
        "chgrp group file"
        "chmod 644 file"
        "chmod u+x file"
        "chmod go-w file"
        "umask"
        "umask 022"
        "chattr +i file"
        "lsattr file"
        "setfacl -m u:user:rwx file"
        "getfacl file"
        "lsof"
        "lsof file"
        "lsof -p pid"
        "fuser file"
        "fuser -k file"
        "netstat -an"
        "netstat -rn"
        "ss -an"
        "ss -tuln"
        "route -n"
        "ip route"
        "ip addr"
        "ifconfig"
        "iwconfig"
        "ping host"
        "ping6 host"
        "traceroute host"
        "tracepath host"
        "mtr host"
        "nslookup host"
        "dig host"
        "host host"
        "whois domain"
        "arp"
        "arp -a"
        "tcpdump"
        "tcpdump -i eth0"
        "wireshark"
        "tshark"
        "iptables -L"
        "iptables -S"
        "ip6tables -L"
        "ufw status"
        "firewall-cmd --list-all"
        "systemctl status"
        "systemctl start service"
        "systemctl stop service"
        "systemctl restart service"
        "systemctl enable service"
        "systemctl disable service"
        "service service start"
        "service service stop"
        "/etc/init.d/service start"
        "chkconfig --list"
        "update-rc.d service enable"
        "rc-update add service"
        "launchctl list"
        "dmesg"
        "dmesg | tail"
        "journalctl"
        "journalctl -f"
        "journalctl -u service"
        "tail -f /var/log/messages"
        "tail -f /var/log/syslog"
        "logger message"
        "logrotate"
        "syslog-ng"
        "rsyslog"
        "anacron"
        "logwatch"
        "fail2ban-client status"
        "denyhosts"
        "rkhunter"
        "chkrootkit"
        "clamscan"
        "freshclam"
        "yum install package"
        "yum update"
        "yum search package"
        "yum info package"
        "yum remove package"
        "yum list installed"
        "rpm -qa"
        "rpm -qi package"
        "rpm -ql package"
        "rpm -qf file"
        "rpm -ivh package.rpm"
        "rpm -Uvh package.rpm"
        "rpm -e package"
        "dnf install package"
        "dnf update"
        "dnf search package"
        "apt-get install package"
        "apt-get update"
        "apt-get upgrade"
        "apt-get remove package"
        "apt-cache search package"
        "apt-cache show package"
        "dpkg -l"
        "dpkg -s package"
        "dpkg -L package"
        "dpkg -S file"
        "dpkg -i package.deb"
        "dpkg -r package"
        "aptitude install package"
        "aptitude search package"
        "snap install package"
        "snap list"
        "snap remove package"
        "flatpak install package"
        "flatpak list"
        "flatpak remove package"
        "brew install package"
        "brew list"
        "brew remove package"
        "port install package"
        "port list"
        "emerge package"
        "emerge --search package"
        "zypper install package"
        "zypper search package"
        "pacman -S package"
        "pacman -Q"
        "pacman -R package"
        "xbps-install package"
        "xbps-query -l"
        "nix-env -i package"
        "nix-env -q"
        "guix install package"
        "guix package -l"
        "slapt-get --install package"
        "slackpkg install package"
        "installpkg package.tgz"
        "removepkg package"
        "upgradepkg package.tgz"
        "explodepkg package.tgz"
        "makepkg"
        "checkinstall"
        "alien package.rpm"
        "equivs-build"
        "fakeroot"
        "lintian package.deb"
        "rpmlint package.rpm"
        "createrepo ."
        "reprepro"
        "mock"
        "sbuild"
        "pbuilder"
        "cowbuilder"
        "docker run image"
        "docker ps"
        "docker images"
        "docker build ."
        "docker pull image"
        "docker push image"
        "docker exec container command"
        "docker logs container"
        "docker stop container"
        "docker rm container"
        "docker rmi image"
        "kubectl get pods"
        "kubectl describe pod"
        "kubectl logs pod"
        "kubectl exec pod command"
        "kubectl apply -f file.yaml"
        "helm install chart"
        "helm list"
        "vagrant up"
        "vagrant ssh"
        "vagrant halt"
        "vagrant destroy"
        "ansible-playbook playbook.yml"
        "terraform init"
        "terraform plan"
        "terraform apply"
        "terraform destroy"
        "packer build template.json"
        "chef-client"
        "puppet apply"
        "salt '*' test.ping"
        "nagios"
        "icinga"
        "zabbix"
        "cacti"
        "munin"
        "collectd"
        "prometheus"
        "grafana"
        "elk"
        "splunk"
        "newrelic"
        "datadog"
        "sensu"
        "consul"
        "vault"
        "nomad"
        "etcd"
        "redis-cli"
        "mysql -u user -p"
        "psql -U user database"
        "sqlite3 database.db"
        "mongo"
        "cassandra"
        "memcached"
        "rabbitmq"
        "activemq"
        "kafka"
        "elasticsearch"
        "solr"
        "apache2ctl"
        "httpd"
        "nginx"
        "lighttpd"
        "tomcat"
        "jetty"
        "gunicorn"
        "uwsgi"
        "unicorn"
        "passenger"
        "pm2"
        "supervisord"
        "systemd"
        "upstart"
        "sysvinit"
        "runit"
        "openrc"
        "launchd"
        "cron"
        "anacron"
        "systemd-timer"
        "logrotate"
        "newsyslog"
        "syslog"
        "rsyslog"
        "syslog-ng"
        "journald"
        "fluentd"
        "filebeat"
        "logstash"
        "ntpd"
        "chronyd"
        "openntpd"
        "sntp"
        "dhcpd"
        "dhclient"
        "bind"
        "named"
        "unbound"
        "dnsmasq"
        "powerdns"
        "nsd"
        "knot"
        "postfix"
        "sendmail"
        "exim"
        "qmail"
        "dovecot"
        "cyrus"
        "courier"
        "procmail"
        "fetchmail"
        "mutt"
        "alpine"
        "pine"
        "elm"
        "mail"
        "mailx"
        "samba"
        "smbd"
        "nmbd"
        "winbind"
        "smbclient"
        "mount.cifs"
        "nfs"
        "nfsd"
        "mountd"
        "rpcbind"
        "portmap"
        "showmount"
        "exportfs"
        "rpcinfo"
        "ssh"
        "sshd"
        "sftp"
        "scp"
        "rsync"
        "rsyncd"
        "vsftpd"
        "proftpd"
        "pure-ftpd"
        "wu-ftpd"
        "xinetd"
        "inetd"
        "tcpd"
        "hosts.allow"
        "hosts.deny"
        "iptables"
        "ip6tables"
        "netfilter"
        "ufw"
        "firewalld"
        "pf"
        "ipfw"
        "ipfilter"
        "shorewall"
        "fail2ban"
        "denyhosts"
        "psad"
        "snort"
        "suricata"
        "bro"
        "zeek"
        "ossec"
        "samhain"
        "aide"
        "tripwire"
        "rkhunter"
        "chkrootkit"
        "lynis"
        "nessus"
        "openvas"
        "nmap"
        "masscan"
        "zmap"
        "unicornscan"
        "hping"
        "nping"
        "arping"
        "fping"
        "netcat"
        "socat"
        "stunnel"
        "openvpn"
        "strongswan"
        "openswan"
        "racoon"
        "isakmpd"
        "wireguard"
        "tinc"
        "zerotier"
        "hamachi"
        "logmein"
        "teamviewer"
        "vnc"
        "x11vnc"
        "tightvnc"
        "realvnc"
        "turbovnc"
        "nomachine"
        "xrdp"
        "rdesktop"
        "freerdp"
        "remmina"
        "vinagre"
        "krdc"
        "X"
        "Xorg"
        "startx"
        "xinit"
        "xdm"
        "gdm"
        "kdm"
        "lightdm"
        "sddm"
        "gnome"
        "kde"
        "xfce"
        "lxde"
        "mate"
        "cinnamon"
        "unity"
        "enlightenment"
        "fluxbox"
        "openbox"
        "jwm"
        "dwm"
        "i3"
        "awesome"
        "xmonad"
        "compiz"
        "kwin"
        "mutter"
        "xfwm4"
        "marco"
        "metacity"
        "mwm"
        "twm"
        "fvwm"
        "afterstep"
        "blackbox"
        "icewm"
        "windowmaker"
        "ratpoison"
        "stumpwm"
        "xprop"
        "xwininfo"
        "xdpyinfo"
        "xrandr"
        "xmodmap"
        "xkbcomp"
        "setxkbmap"
        "xset"
        "xsetroot"
        "xrdb"
        "xhost"
        "xauth"
        "xterm"
        "rxvt"
        "urxvt"
        "konsole"
        "gnome-terminal"
        "xfce4-terminal"
        "lxterminal"
        "mate-terminal"
        "terminology"
        "sakura"
        "terminator"
        "tilix"
        "guake"
        "yakuake"
        "tilda"
        "firefox"
        "chromium"
        "chrome"
        "opera"
        "safari"
        "edge"
        "lynx"
        "links"
        "w3m"
        "elinks"
        "seamonkey"
        "epiphany"
        "midori"
        "qupzilla"
        "konqueror"
        "libreoffice"
        "openoffice"
        "abiword"
        "kword"
        "gnumeric"
        "kcalc"
        "gimp"
        "inkscape"
        "blender"
        "krita"
        "mypaint"
        "darktable"
        "rawtherapee"
        "digikam"
        "shotwell"
        "gthumb"
        "eog"
        "gwenview"
        "ristretto"
        "feh"
        "sxiv"
        "mpv"
        "vlc"
        "mplayer"
        "xine"
        "totem"
        "dragon"
        "kaffeine"
        "audacious"
        "rhythmbox"
        "banshee"
        "amarok"
        "clementine"
        "strawberry"
        "deadbeef"
        "cmus"
        "ncmpcpp"
        "moc"
        "herrie"
        "audacity"
        "ardour"
        "lmms"
        "rosegarden"
        "musescore"
        "lilypond"
        "tuxguitar"
        "hydrogen"
        "qtractor"
        "jack"
        "pulseaudio"
        "alsa"
        "oss"
        "pavucontrol"
        "alsamixer"
        "amixer"
        "pactl"
        "pacmd"
        "bluetoothctl"
        "hcitool"
        "rfkill"
        "iwlist"
        "iwconfig"
        "nmcli"
        "nmtui"
        "wicd"
        "connman"
        "network-manager"
        "systemd-networkd"
        "ifup"
        "ifdown"
        "ifconfig"
        "route"
        "ip"
        "iw"
        "ethtool"
        "mii-tool"
        "lsusb"
        "lspci"
        "lsmod"
        "modprobe"
        "modinfo"
        "insmod"
        "rmmod"
        "depmod"
        "update-modules"
        "mkinitrd"
        "mkinitramfs"
        "dracut"
        "update-initramfs"
        "grub-install"
        "grub-mkconfig"
        "update-grub"
        "grub2-install"
        "grub2-mkconfig"
        "lilo"
        "syslinux"
        "extlinux"
        "isolinux"
        "pxelinux"
        "gfxboot"
        "plymouth"
        "bootsplash"
        "splash"
        "fbsplash"
        "kernel"
        "vmlinuz"
        "initrd"
        "initramfs"
        "bzImage"
        "zImage"
        "uname"
        "uptime"
        "hostname"
        "domainname"
        "dnsdomainname"
        "nisdomainname"
        "ypdomainname"
        "arch"
        "machine"
        "proc"
        "cpuinfo"
        "meminfo"
        "version"
        "cmdline"
        "interrupts"
        "ioports"
        "iomem"
        "dma"
        "filesystems"
        "devices"
        "partitions"
        "mounts"
        "swaps"
        "stat"
        "loadavg"
        "locks"
        "modules"
        "kcore"
        "kmsg"
        "sysrq-trigger"
        "sys"
        "dev"
        "run"
        "tmp"
        "var"
        "etc"
        "usr"
        "bin"
        "sbin"
        "lib"
        "lib64"
        "opt"
        "srv"
        "boot"
        "home"
        "root"
        "mnt"
        "media"
        "cdrom"
        "floppy"
        "lost+found"
    )
    
    # Exécution de tous les tests
    print_status "INFO" "Début des 743 tests comparatifs..."
    local test_number=1
    for command in "${test_commands[@]}"; do
        run_comparative_test $test_number "$command"
        test_number=$((test_number + 1))
        sleep 0.01
    done
    
    # =============================================================================
    # RÉSUMÉ ET STATISTIQUES
    # =============================================================================
    
    echo ""
    print_status "INFO" "==================== RÉSUMÉ COMPARATIF ===================="
    print_status "INFO" "Total des tests: $TOTAL_TESTS"
    print_status "INFO" "Tests conformes: $PASSED_TESTS"
    print_status "INFO" "Tests non-conformes: $FAILED_TESTS"
    print_status "INFO" "Tests timeout: $TIMEOUT_TESTS"
    print_status "INFO" "Tests ignorés: $SKIPPED_TESTS"
    
    # Calcul du taux de conformité
    local effective_tests=$((TOTAL_TESTS - SKIPPED_TESTS))
    local conformity_rate=0
    [ $effective_tests -gt 0 ] && conformity_rate=$((PASSED_TESTS * 100 / effective_tests))
    
    print_status "INFO" "Taux de conformité POSIX: ${conformity_rate}%"
    print_status "INFO" "========================================================="
    
    # Sauvegarde du résumé
    cat >> "$TEST_RESULTS_FILE" << EOF

=== RÉSUMÉ FINAL ===
Total: $TOTAL_TESTS
Conformes: $PASSED_TESTS
Non-conformes: $FAILED_TESTS
Timeouts: $TIMEOUT_TESTS
Ignorés: $SKIPPED_TESTS
Taux de conformité: ${conformity_rate}%
Date de fin: $(date)
EOF
    
    cat >> "$DETAILED_LOG" << EOF

===============================================================================
RÉSUMÉ FINAL DES 743 TESTS
===============================================================================
Total des tests: $TOTAL_TESTS
Tests conformes: $PASSED_TESTS
Tests non-conformes: $FAILED_TESTS
Tests timeout: $TIMEOUT_TESTS
Tests ignorés: $SKIPPED_TESTS
Taux de conformité POSIX: ${conformity_rate}%

Fin des tests: $(date)
EOF
    
    print_status "INFO" "Résultats sauvegardés:"
    print_status "INFO" "  - Résumé: $TEST_RESULTS_FILE"
    print_status "INFO" "  - Détails: $DETAILED_LOG"
    
    # Conseils d'analyse
    if [ $FAILED_TESTS -gt 0 ]; then
        echo ""
        print_status "INFO" "ANALYSE DES DIFFÉRENCES:"
        print_status "INFO" "  - Voir tous les échecs: grep 'FAIL' $TEST_RESULTS_FILE"
        print_status "INFO" "  - Log détaillé complet: cat $DETAILED_LOG"
        print_status "INFO" "  - Tests exit code: grep 'FAIL_EXIT' $DETAILED_LOG"
        print_status "INFO" "  - Tests sortie: grep 'FAIL_STDOUT' $DETAILED_LOG"
        print_status "INFO" "  - Tests erreur: grep 'FAIL_STDERR' $DETAILED_LOG"
    fi
    
    if [ $TIMEOUT_TESTS -gt 0 ]; then
        echo ""
        print_status "INFO" "TESTS TIMEOUT: grep 'TIMEOUT' $DETAILED_LOG"
    fi
    
    # Code de sortie
    [ $FAILED_TESTS -gt 0 ] && exit 1 || exit 0
}

main "$@"
